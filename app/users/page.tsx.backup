"use client";

import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ModernBadge } from "@/components/ui/modern-badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Plus,
  Search,
  Edit,
  Trash2,
  UserCheck,
  UserX,
  Loader2,
} from "lucide-react";
import {
  userService,
  User,
  CreateUserData,
  UpdateUserData,
} from "@/lib/user-service";
import { toast } from "sonner";
import { useAuth } from "@/lib/auth-context";

export default function UsersPage() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [isFormActive, setIsFormActive] = useState(false);
  const [formData, setFormData] = useState<CreateUserData>({
    name: "",
    email: "",
    password: "",
    phone: "",
    responsibility: "",
    roles: [],
  });
  const { user: currentUser } = useAuth();

  // Fetch users from API
  const fetchUsers = async (showSearchMessages = true) => {
    try {
      setLoading(true);
      const response = await userService.getUsers(currentPage, 15, searchTerm);
      setUsers(response.data);
      setTotalPages(response.last_page);

      // Show message for search results only if showSearchMessages is true
      if (showSearchMessages) {
        if (response.data.length > 0 && searchTerm) {
          toast.success("Search results found", {
            description: `Found ${response.data.length} user(s) matching "${searchTerm}".`,
            duration: 3000,
          });
        } else if (response.data.length === 0 && searchTerm) {
          toast.info("No results found", {
            description: `No users found matching "${searchTerm}". Try a different search term.`,
            duration: 4000,
          });
        }
      }
    } catch (error: any) {
      console.error("Failed to fetch users:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.response?.data?.error ||
        "Failed to fetch users";
      toast.error("Something Went Wrong! Failed to load users", {
        description: errorMessage,
        duration: 6000,
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Only fetch users if no dialogs are open
    if (!isCreateDialogOpen && !isEditDialogOpen) {
      fetchUsers();
    }
  }, [currentPage, searchTerm, isCreateDialogOpen, isEditDialogOpen]);

  const handleCreateUser = async () => {
    // Form validation
    if (!formData.name.trim()) {
      toast.error("Warning! Name is required", {
        description: "Please enter a valid name for the user.",
        duration: 4000,
      });
      return;
    }

    if (!formData.email.trim()) {
      toast.error("Warning! Email is required", {
        description: "Please enter a valid email address.",
        duration: 4000,
      });
      return;
    }

    if (!formData.password.trim()) {
      toast.error("Warning! Password is required", {
        description: "Please enter a secure password.",
        duration: 4000,
      });
      return;
    }

    if (formData.password.length < 8) {
      toast.error("Warning! Password too short", {
        description: "Password must be at least 8 characters long.",
        duration: 4000,
      });
      return;
    }

    try {
      await userService.createUser(formData);
      toast.success("Successfully completed registration", {
        description: `${formData.name} has been added to the system with ${
          formData.roles?.[0] || "User"
        } role.`,
        duration: 5000,
      });
      setIsCreateDialogOpen(false);
      setFormData({
        name: "",
        email: "",
        password: "",
        phone: "",
        responsibility: "",
        roles: [],
      });
      fetchUsers(false);
    } catch (error: any) {
      console.error("Failed to create user:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.response?.data?.error ||
        "Failed to create user";
      toast.error("Something Went Wrong! User creation failed", {
        description: errorMessage,
        duration: 6000,
      });
    }
  };

  const handleUpdateUser = async () => {
    if (!editingUser) return;

    // Form validation
    if (!formData.name.trim()) {
      toast.error("Warning! Name is required", {
        description: "Please enter a valid name for the user.",
        duration: 4000,
      });
      return;
    }

    if (!formData.email.trim()) {
      toast.error("Warning! Email is required", {
        description: "Please enter a valid email address.",
        duration: 4000,
      });
      return;
    }

    if (formData.password && formData.password.length < 8) {
      toast.error("Warning! Password too short", {
        description: "Password must be at least 8 characters long.",
        duration: 4000,
      });
      return;
    }

    try {
      const updateData: UpdateUserData = {
        name: formData.name,
        email: formData.email,
        password: formData.password || undefined,
        phone: formData.phone,
        responsibility: formData.responsibility,
        roles: formData.roles,
      };

      await userService.updateUser(editingUser.id, updateData);
      toast.success("Successfully updated user", {
        description: `${formData.name}'s information has been updated successfully.`,
        duration: 5000,
      });
      setIsEditDialogOpen(false);
      setEditingUser(null);
      setFormData({
        name: "",
        email: "",
        password: "",
        phone: "",
        responsibility: "",
        roles: [],
      });
      fetchUsers(false);
    } catch (error: any) {
      console.error("Failed to update user:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.response?.data?.error ||
        "Failed to update user";
      toast.error("Something Went Wrong! User update failed", {
        description: errorMessage,
        duration: 6000,
      });
    }
  };

  const handleDeleteUser = async (userId: number) => {
    if (!confirm("Are you sure you want to delete this user?")) return;

    try {
      await userService.deleteUser(userId);
      toast.success("Successfully deleted user", {
        description: "The user has been permanently removed from the system.",
        duration: 5000,
      });
      fetchUsers(false);
    } catch (error: any) {
      console.error("Failed to delete user:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.response?.data?.error ||
        "Failed to delete user";
      toast.error("Something Went Wrong! User deletion failed", {
        description: errorMessage,
        duration: 6000,
      });
    }
  };

  const openEditDialog = (user: User) => {
    setEditingUser(user);
    setFormData({
      name: user.name,
      email: user.email,
      password: "",
      phone: user.phone || "",
      responsibility: user.responsibility || "",
      roles: user.roles.map((role) => role.name),
    });
    setIsEditDialogOpen(true);
  };

  const getStatusBadge = (user: User) => {
    const isActive = user.email_verified_at !== null;
    return (
      <ModernBadge variant={isActive ? "success" : "error"} size="sm">
        {isActive ? "Active" : "Inactive"}
      </ModernBadge>
    );
  };

  const getRoleBadges = (roles: any[]) => {
    if (!roles || roles.length === 0) {
      return (
        <ModernBadge variant="default" size="sm">
          No Role
        </ModernBadge>
      );
    }

    return roles.map((role, index) => {
      const variant =
        role.name === "Admin"
          ? "error"
          : role.name === "Manager"
          ? "warning"
          : "info";

      return (
        <ModernBadge key={index} variant={variant} size="sm" className="mr-1">
          {role.name}
        </ModernBadge>
      );
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold tracking-tight">User Management</h2>
      </div>

      <Card>
          <CardHeader>
            <CardTitle>System Users</CardTitle>
            <CardDescription>
              Manage user accounts and permissions
            </CardDescription>
            <div className="flex items-center justify-between">
              <div
                className="relative flex-1 max-w-sm"
                onClick={(e) => e.stopPropagation()}
                onKeyDown={(e) => e.stopPropagation()}
              >
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  key={`search-${isCreateDialogOpen}-${isEditDialogOpen}`}
                  placeholder="Search users..."
                  value={searchTerm}
                  onChange={(e) => {
                    e.stopPropagation();
                    // Only update search if no form is active
                    if (!isFormActive) {
                      setSearchTerm(e.target.value);
                    }
                  }}
                  onFocus={(e) => {
                    // Prevent focus if dialogs are open
                    if (isCreateDialogOpen || isEditDialogOpen) {
                      e.target.blur();
                    }
                  }}
                  onKeyDown={(e) => e.stopPropagation()}
                  className="pl-8"
                />
              </div>
              <Dialog
                open={isCreateDialogOpen}
                onOpenChange={(open) => {
                  setIsCreateDialogOpen(open);
                  setIsFormActive(open);
                  // Clear search term when dialog opens to prevent interference
                  if (open) {
                    setSearchTerm("");
                  }
                }}
              >
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Add User
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <form onSubmit={(e) => e.preventDefault()}>
                    <DialogHeader>
                      <DialogTitle>Create New User</DialogTitle>
                      <DialogDescription>
                        Add a new user to the system with appropriate roles and
                        permissions.
                      </DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <div className="grid gap-2">
                        <Label htmlFor="name">Name</Label>
                        <Input
                          id="create-name"
                          value={formData.name}
                          onChange={(e) => {
                            e.stopPropagation();
                            setFormData({ ...formData, name: e.target.value });
                          }}
                          onKeyDown={(e) => e.stopPropagation()}
                          placeholder="Enter full name"
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="email">Email</Label>
                        <Input
                          id="create-email"
                          type="email"
                          value={formData.email}
                          onChange={(e) => {
                            e.stopPropagation();
                            setFormData({ ...formData, email: e.target.value });
                          }}
                          onKeyDown={(e) => e.stopPropagation()}
                          placeholder="Enter email address"
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="password">Password</Label>
                        <Input
                          id="create-password"
                          type="password"
                          value={formData.password}
                          onChange={(e) => {
                            e.stopPropagation();
                            setFormData({
                              ...formData,
                              password: e.target.value,
                            });
                          }}
                          onKeyDown={(e) => e.stopPropagation()}
                          placeholder="Enter password"
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="phone">Phone</Label>
                        <Input
                          id="create-phone"
                          value={formData.phone}
                          onChange={(e) => {
                            e.stopPropagation();
                            setFormData({ ...formData, phone: e.target.value });
                          }}
                          onKeyDown={(e) => e.stopPropagation()}
                          placeholder="Enter phone number"
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="responsibility">Responsibility</Label>
                        <Input
                          id="create-responsibility"
                          value={formData.responsibility}
                          onChange={(e) => {
                            e.stopPropagation();
                            setFormData({
                              ...formData,
                              responsibility: e.target.value,
                            });
                          }}
                          onKeyDown={(e) => e.stopPropagation()}
                          placeholder="Enter job responsibility"
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="roles">Roles</Label>
                        <Select
                          value={formData.roles?.[0] || ""}
                          onValueChange={(value) =>
                            setFormData({ ...formData, roles: [value] })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select role" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Admin">Admin</SelectItem>
                            <SelectItem value="Manager">Manager</SelectItem>
                            <SelectItem value="User">User</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </form>
                  <DialogFooter>
                    <Button onClick={handleCreateUser}>Create User</Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </div>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin" />
                <span className="ml-2">Loading users...</span>
              </div>
            ) : (
              <Table className="bg-white">
                <TableHeader>
                  <TableRow className="bg-white">
                    <TableHead>Name</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Responsibility</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Last Login</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {users.map((user) => (
                    <TableRow
                      key={user.id}
                      data-user-id={user.id}
                      className="bg-white"
                    >
                      <TableCell className="font-medium">{user.name}</TableCell>
                      <TableCell>{user.phone || "N/A"}</TableCell>
                      <TableCell>{user.email}</TableCell>
                      <TableCell>
                        <div className="flex flex-wrap gap-1">
                          {getRoleBadges(user.roles)}
                        </div>
                      </TableCell>
                      <TableCell>{user.responsibility || "N/A"}</TableCell>
                      <TableCell>{getStatusBadge(user)}</TableCell>
                      <TableCell>
                        {user.last_login_at
                          ? new Date(user.last_login_at).toLocaleDateString()
                          : "Never"}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => openEditDialog(user)}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          {currentUser?.id !== user.id && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDeleteUser(user.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>

        {/* Edit User Dialog */}
        <Dialog
          open={isEditDialogOpen}
          onOpenChange={(open) => {
            setIsEditDialogOpen(open);
            setIsFormActive(open);
            // Clear search term when dialog opens to prevent interference
            if (open) {
              setSearchTerm("");
            }
          }}
        >
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit User</DialogTitle>
              <DialogDescription>
                Update user information and permissions.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="edit-name">Name</Label>
                <Input
                  id="edit-name"
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                  placeholder="Enter full name"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-email">Email</Label>
                <Input
                  id="edit-email"
                  type="email"
                  value={formData.email}
                  onChange={(e) =>
                    setFormData({ ...formData, email: e.target.value })
                  }
                  placeholder="Enter email address"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-password">New Password (optional)</Label>
                <Input
                  id="edit-password"
                  type="password"
                  value={formData.password}
                  onChange={(e) =>
                    setFormData({ ...formData, password: e.target.value })
                  }
                  placeholder="Leave blank to keep current password"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-phone">Phone</Label>
                <Input
                  id="edit-phone"
                  value={formData.phone}
                  onChange={(e) =>
                    setFormData({ ...formData, phone: e.target.value })
                  }
                  placeholder="Enter phone number"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-responsibility">Responsibility</Label>
                <Input
                  id="edit-responsibility"
                  value={formData.responsibility}
                  onChange={(e) =>
                    setFormData({ ...formData, responsibility: e.target.value })
                  }
                  placeholder="Enter job responsibility"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-roles">Roles</Label>
                <Select
                  value={formData.roles?.[0] || ""}
                  onValueChange={(value) =>
                    setFormData({ ...formData, roles: [value] })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select role" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Admin">Admin</SelectItem>
                    <SelectItem value="Manager">Manager</SelectItem>
                    <SelectItem value="User">User</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button onClick={handleUpdateUser}>Update User</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
